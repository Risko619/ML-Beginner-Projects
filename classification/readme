# Car Classification with K-Nearest Neighbors

This simple Python script demonstrates how to use the K-Nearest Neighbors (KNN) algorithm to classify cars based on their attributes. The code uses the scikit-learn library for machine learning and the pandas library for data manipulation.

## Prerequisites

- Python 3.x
- Required Python libraries: scikit-learn, pandas, numpy

Install the necessary libraries using the following command:

```
pip install scikit-learn pandas numpy
```

## Getting Started

1. Clone the repository:

```
git clone https://github.com/your-username/your-repository.git
cd your-repository
```

2. Run the code:

```
python car_classification.py
```

Make sure to replace `your-username` and `your-repository` with your GitHub username and repository name.

## Dataset

The code uses the 'car.data' dataset, which contains information about car attributes. The dataset is loaded using pandas:

```python
data = pd.read_csv('car.data')
print(data.head())
```

## Data Preprocessing

The non-numerical labels in the dataset are encoded into appropriate integer values using scikit-learn's LabelEncoder:

```python
le = preprocessing.LabelEncoder()
buying = le.fit_transform(data['buying'])
# ... (repeat for other features)
cls = le.fit_transform(data['class'])
```

## Model Training and Testing

The dataset is split into training and testing sets using scikit-learn's `train_test_split` function:

```python
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.1)
```

The K-Nearest Neighbors model is then trained and evaluated:

```python
model = KNeighborsClassifier(n_neighbors=9)
model.fit(x_train, y_train)
acc = model.score(x_test, y_test)
print(acc)
```

## Predictions

Finally, the model makes predictions on the test set, and the results are printed along with the actual values:

```python
predicted = model.predict(x_test)
names = ['unacc', 'acc', 'good', 'vgood']

for x in range(len(predicted)):
    print("Predicted: ", names[predicted[x]], "Data: ", x_test[x], "Actual: ", names[y_test[x]])
    n = model.kneighbors([x_test[x]], 9, True)
    print("N: ", n)
```

Feel free to modify the code and experiment with different models or datasets!
